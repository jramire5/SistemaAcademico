@page "/docentesCursos"
@using Domain.Model.Dtos
@inject HttpClient Http

<PageTitle>Docentes</PageTitle>

<h1>Docentes Cursos</h1>

@if (personas==null)
{
    <p><em>Loading...</em></p>
}
else
{

    <select @onchange="OnSelectionChange">
        <option value="0">-- Selecionar un Docente --</option>
        @foreach (var persona in personas)
        {
            <option value="@persona.id_persona">
                @persona.nombre
            </option>
        }
    </select>

    @if (docentesCurso == null)
    {
        @if (cargandoDocentes)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <p><em>No hay información para mostrar.</em></p>
        }
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Dictado</th>
                    <th>Materia</th>
                    <th>Comision</th>
                    <th>Año calendario</th>
                    <th>Docente</th>
                    <th>Cargo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var docentesC in docentesCurso)
                {
                    <tr>
                        <td>@docentesC.id_dictado</td>
                        <td>@docentesC.desc_materia</td>
                        <td>@docentesC.desc_comision</td>
                        <td>@docentesC.anio_calendario</td>
                        <td>@docentesC.docente</td>
                        <td>@docentesC.desc_cargo</td>
                    </tr>
                }
            </tbody>
        </table>
    }

}
@code {
    private DocenteDictadoDto[]? docentesCurso;
    private List<PersonaDto> personas;
    private int selectedPersonaId;
    private bool cargandoDocentes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //  docentesCurso = await Http.GetFromJsonAsync<DocenteDictadoDto[]>("docente-cursos");
            // Replace "your-api-url" with the actual API endpoint
            var response = await Http.GetFromJsonAsync<List<PersonaDto>>("docentes");
            if (response != null)
            {
                personas = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error OnInit: {ex.Message}");
        }
    }

    private async Task OnSelectionChange(ChangeEventArgs e)
    {
        try
        {
            cargandoDocentes = true;
            docentesCurso = null;
            selectedPersonaId = int.Parse(e.Value?.ToString() ?? "0");
            Console.WriteLine($"Persona ID: {selectedPersonaId}");
            docentesCurso = await Http.GetFromJsonAsync<DocenteDictadoDto[]>($"docente-cursos/{selectedPersonaId}");
            cargandoDocentes = false;
        }
        catch (Exception ex)
        {
            cargandoDocentes = false;
            Console.WriteLine($"Error OnSelectionChange: {ex.Message}");
        }
       
        
    }
}
